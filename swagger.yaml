openapi: 3.0.0
info:
  title: Train Booking API
  description: API for booking train tickets
  version: 1.0.0
servers:
  - url: http://localhost:5000

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: Bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: x-admin-api-key
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "password123"
        bookings:
          type: array
          items:
            $ref: "#/components/schemas/Booking"
    Train:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Express Train"
        source:
          type: string
          example: "New York"
        destination:
          type: string
          example: "Los Angeles"
        totalSeats:
          type: integer
          example: 100
        availableSeats:
          type: integer
          example: 50
        bookings:
          type: array
          items:
            $ref: "#/components/schemas/Booking"
    Booking:
      type: object
      properties:
        id:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1
        trainId:
          type: integer
          example: 1
        user:
          $ref: "#/components/schemas/User"
        train:
          $ref: "#/components/schemas/Train"

paths:
  /ping:
    get:
      summary: "Health Check"
      description: "Checks the health of the server."
      responses:
        200:
          description: "Success"
          content:
            text/plain:
              schema:
                type: string
                example: "Hello World"

  /api/v1/auth/register:
    post:
      summary: "Register User"
      description: "Registers a user with name, email and password."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
      responses:
        201:
          description: "User registered successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: "Bad request."

  /api/v1/user/login:
    post:
      summary: "User Login"
      description: "Logs in a user and returns a token."
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: "Login successful."
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  message:
                    type: string
                    example: "Login successful."
        401:
          description: "Invalid email or password."

  /api/v1/booking/bookSeat:
    post:
      summary: "Book a Seat"
      description: "Books a seat for a user. Requires Bearer token authentication."
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: integer
                trainId:
                  type: integer

      responses:
        201:
          description: "Seat booked successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        400:
          description: "Seat already booked."
        401:
          description: "Unauthorized."

  /api/v1/booking/{bookingId}:
    get:
      summary: "Get Booking Details"
      description: "Returns booking information for a given booking ID. Requires Bearer token authentication."
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: bookingId
          required: true
          schema:
            type: integer
          description: "The ID of the booking."
      responses:
        200:
          description: "Booking details retrieved successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Booking"
        404:
          description: "Booking not found."
        401:
          description: "Unauthorized."

  /api/v1/booking/getSeatAvailabilty:
    get:
      summary: "Check Seat Availability"
      description: "Checks if a specific seat is booked."
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: trainId
          required: true
          schema:
            type: integer
          description: "The ID of the train."
        - in: path
          name: seatNumber
          required: true
          schema:
            type: integer
          description: "The seat number."
      responses:
        200:
          description: "Seat availability retrieved."
          content:
            application/json:
              schema:
                type: object
                properties:
                  seatNumber:
                    type: integer
                    example: 45
                  isBooked:
                    type: boolean
                    example: false
        404:
          description: "Seat not found."

  /api/v1/admin/addTrain:
    post:
      summary: "Add Train"
      description: "Adds a new train. Requires API key authentication."
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                source:
                  type: string
                destination:
                  type: string
                totalSeats:
                  type: integer
      responses:
        201:
          description: "Train added successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Train"
        401:
          description: "Invalid API key."
